{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "489e3ace",
   "metadata": {},
   "source": [
    "# Analysis of Bin Master Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a1e814e",
   "metadata": {},
   "outputs": [],
   "source": [
    "pip install dash"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff376bd1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing necessary libraries\n",
    "import pandas as pd\n",
    "import dash\n",
    "from dash import dcc\n",
    "from dash import html\n",
    "from dash.dependencies import Input, Output\n",
    "import pandas as pd\n",
    "import plotly.graph_objects as go\n",
    "import random\n",
    "import string\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d685a12",
   "metadata": {},
   "outputs": [],
   "source": [
    "data=pd.read_csv('Test_data2.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "688f1c3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b8e9f353",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "212a554f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#sorting the bay and Ailse in an ascending order\n",
    "data = data.sort_values(by=[\"BayNo\", \"AisleNo\"],ascending=[True, True])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c5384e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "311f0e0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "data=data.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "224d0704",
   "metadata": {},
   "outputs": [],
   "source": [
    "data['AisleNo'] = data['AisleNo'].str.upper()\n",
    "# Convert 'BayNo' to integers\n",
    "data['BayNo'] = data['BayNo'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a29b550",
   "metadata": {},
   "outputs": [],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d2d7496c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#adding Bin_Type column with the random values\n",
    "bin_type=[random.choice(['PickFace','Goodsin','Null']) for _ in range(len(data))]\n",
    "#generating the random bin values for the len of the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dbbac506",
   "metadata": {},
   "outputs": [],
   "source": [
    "#adding new column and assigning the values to that column\n",
    "data['BinType']=bin_type\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d5a7781",
   "metadata": {},
   "outputs": [],
   "source": [
    "#bin_zone=[random.choice(['A','B','C']) for _ in range(len(data))]\n",
    "#assigning random values to the \n",
    "bin_zone=[random.choice(string.ascii_uppercase) for _ in range(len(data))]\n",
    "data['BinZone']=bin_zone"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95ffc5f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "data['FloorNo'] = data['FloorNo'].str.upper()  # Convert all floor values to uppercase\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a131e504",
   "metadata": {},
   "outputs": [],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b3518623",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Get unique floor numbers\n",
    "floor_numbers = sorted(data['FloorNo'].unique())\n",
    "\n",
    "app = dash.Dash(__name__)\n",
    "\n",
    "app.layout = html.Div(children=[\n",
    "    html.H1(\"Warehouse Bin Inventory\", style={\"text-align\": \"center\"}),\n",
    "\n",
    "    # Filter components\n",
    "    html.Div(style={'display': 'flex'}, children=[\n",
    "        html.Div(style={'flex': '1'}, children=[\n",
    "            html.H2(\"Search by Stock Code\"),\n",
    "            dcc.Input(id=\"stock-code-input\", placeholder=\"Enter Stock Code\")\n",
    "        ]),\n",
    "\n",
    "        html.Div(style={'flex': '1'}, children=[\n",
    "            html.H3(\"Filter by Bin Type\"),\n",
    "            dcc.Dropdown(\n",
    "                id=\"bin-type-dropdown\",\n",
    "                options=[{\"label\": bin_type, \"value\": bin_type} for bin_type in data[\"BinType\"].unique()],\n",
    "                value=\"All\",\n",
    "                placeholder=\"Select below\",\n",
    "                style={\"width\": \"150px\", \"height\": \"30px\"},\n",
    "                clearable=True,\n",
    "            )\n",
    "        ]),\n",
    "\n",
    "        html.Div(style={'flex': '1'}, children=[\n",
    "            html.H3(\"Filter by Bin Zone\"),\n",
    "            dcc.Dropdown(\n",
    "                id=\"bin-zone-dropdown\",\n",
    "                options=[{\"label\": bin_zone, \"value\": bin_zone} for bin_zone in data[\"BinZone\"].unique()],\n",
    "                value=\"All\",\n",
    "                placeholder=\"Select below\",\n",
    "                style={\"width\": \"150px\", \"height\": \"30px\"},\n",
    "                clearable=True,\n",
    "            )\n",
    "        ])\n",
    "    ]),\n",
    "\n",
    "    # Dynamic graphs\n",
    "    html.Div(id='floor-graphs-container')\n",
    "])\n",
    "\n",
    "     \n",
    "\n",
    "# Create dynamic graphs for each floor\n",
    "def create_floor_graph(floor_number, filtered_data):\n",
    "    fig = go.Figure(data=[go.Scatter(\n",
    "        x=filtered_data[\"BayNo\"],\n",
    "        y=filtered_data[\"AisleNo\"],\n",
    "        mode=\"markers\",\n",
    "        marker_symbol=\"square\",\n",
    "        marker_size=25,\n",
    "        marker_line_width=1,\n",
    "        marker_line_color=\"black\",\n",
    "        marker_colorscale=\"Viridis\",\n",
    "        marker_cmin=0,\n",
    "        marker_cmax=filtered_data[\"SumofStock\"].max(),\n",
    "        marker_color=filtered_data[\"SumofStock\"],\n",
    "        hoverinfo=\"text\",\n",
    "        hovertext=[\n",
    "            f\"BinNo: {row['BinNo']}<br>\\nFloorNo: {row['FloorNo']}<br>\\nAisleNo: {row['AisleNo']}<br>\\nBayNo: {row['BayNo']}<br>\\nBatchLotNo: {row['BatchLotNo']}<br>\\nStockCode: {row['StockCode']}<br>\\nStockInHand: {row['StockInHand']}<br>\\nSumofStock: {row['SumofStock']}\"\n",
    "            for index, row in filtered_data.iterrows()\n",
    "        ]\n",
    "    )])\n",
    "\n",
    "    fig.update_layout(\n",
    "        title=f\"Floor {floor_number} - Warehouse Bin Inventory\",\n",
    "        xaxis_title=\"BayNo\",\n",
    "        yaxis_title=\"AisleNo\",\n",
    "        xaxis_type=\"category\",\n",
    "        yaxis_type=\"category\",\n",
    "        coloraxis_colorbar=dict(title=\"SumofStock\")\n",
    "    )\n",
    "\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output('floor-graphs-container', 'children'),\n",
    "    [\n",
    "        Input(\"stock-code-input\", \"value\"),\n",
    "        Input(\"bin-type-dropdown\", \"value\"),\n",
    "        Input(\"bin-zone-dropdown\", \"value\")\n",
    "    ]\n",
    ")\n",
    "def update_floor_graphs(stock_code, bin_type, bin_zone):\n",
    "    filtered_data = data\n",
    "\n",
    "    if stock_code is not None and stock_code != \"\":\n",
    "        filtered_data = filtered_data[filtered_data[\"StockCode\"] == stock_code]\n",
    "\n",
    "    if bin_type != \"All\":\n",
    "        filtered_data = filtered_data[filtered_data[\"BinType\"] == bin_type]\n",
    "\n",
    "    if bin_zone != \"All\":\n",
    "        filtered_data = filtered_data[filtered_data[\"BinZone\"] == bin_zone]\n",
    "\n",
    "    floor_graphs = []\n",
    "\n",
    "    for floor_number in floor_numbers:\n",
    "        floor_data = filtered_data[filtered_data[\"FloorNo\"] == floor_number]\n",
    "        floor_graph = create_floor_graph(floor_number, floor_data)\n",
    "        floor_graphs.append(\n",
    "            dcc.Graph(\n",
    "                figure=floor_graph,\n",
    "                style={'width': '100%'}\n",
    "            )\n",
    "        )\n",
    "\n",
    "    return floor_graphs\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    app.run_server(debug=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ebb18aed",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Get unique floor numbers\n",
    "floor_numbers = sorted(data['FloorNo'].unique())\n",
    "\n",
    "app = dash.Dash(__name__)\n",
    "\n",
    "app.layout = html.Div(children=[\n",
    "    html.H1(\"Warehouse Bin Inventory\", style={\"text-align\": \"center\"}),\n",
    "\n",
    "    # Filter components\n",
    "    html.Div(style={'display': 'flex'}, children=[\n",
    "        html.Div(style={'flex': '1'}, children=[\n",
    "            html.H2(\"Search by Stock Code\"),\n",
    "            dcc.Input(id=\"stock-code-input\", placeholder=\"Enter Stock Code\")\n",
    "        ]),\n",
    "\n",
    "        html.Div(style={'flex': '1'}, children=[\n",
    "            html.H3(\"Filter by Bin Type\"),\n",
    "            dcc.Dropdown(\n",
    "                id=\"bin-type-dropdown\",\n",
    "                options=[{\"label\": bin_type, \"value\": bin_type} for bin_type in data[\"BinType\"].unique()],\n",
    "                value=\"All\",\n",
    "                placeholder=\"Select below\",\n",
    "                style={\"width\": \"150px\", \"height\": \"30px\"},\n",
    "                clearable=True,\n",
    "            )\n",
    "        ]),\n",
    "\n",
    "        html.Div(style={'flex': '1'}, children=[\n",
    "            html.H3(\"Filter by Bin Zone\"),\n",
    "            dcc.Dropdown(\n",
    "                id=\"bin-zone-dropdown\",\n",
    "                options=[{\"label\": bin_zone, \"value\": bin_zone} for bin_zone in data[\"BinZone\"].unique()],\n",
    "                value=\"All\",\n",
    "                placeholder=\"Select below\",\n",
    "                style={\"width\": \"150px\", \"height\": \"30px\"},\n",
    "                clearable=True,\n",
    "            )\n",
    "        ])\n",
    "    ]),\n",
    "\n",
    "    # Dynamic graphs\n",
    "    html.Div(id='floor-graphs-container')\n",
    "])\n",
    "\n",
    "# Create dynamic graphs for each floor\n",
    "def create_floor_graph(floor_number, filtered_data):\n",
    "    # Sort the y-axis values (AisleNo) alphabetically\n",
    "    filtered_data = filtered_data.sort_values(by=[\"BayNo\", \"AisleNo\"],ascending=[True, True])\n",
    "    \n",
    "    \n",
    "\n",
    "    fig = go.Figure(data=[go.Scatter(\n",
    "        x=filtered_data[\"BayNo\"],\n",
    "        y=filtered_data[\"AisleNo\"],\n",
    "        mode=\"markers\",\n",
    "        marker_symbol=\"square\",\n",
    "        marker_size=25,\n",
    "        marker_line_width=1,\n",
    "        marker_line_color=\"black\",\n",
    "        marker_colorscale=\"Viridis\",\n",
    "        marker_cmin=0,\n",
    "        marker_cmax=filtered_data[\"SumofStock\"].max(),\n",
    "        marker_color=filtered_data[\"SumofStock\"],\n",
    "        hoverinfo=\"text\",\n",
    "        hovertext=[\n",
    "            f\"BinNo: {row['BinNo']}<br>\\nFloorNo: {row['FloorNo']}<br>\\nAisleNo: {row['AisleNo']}<br>\\nBayNo: {row['BayNo']}<br>\\nBatchLotNo: {row['BatchLotNo']}<br>\\nStockCode: {row['StockCode']}<br>\\nStockInHand: {row['StockInHand']}<br>\\nSumofStock: {row['SumofStock']}\"\n",
    "            for index, row in filtered_data.iterrows()\n",
    "        ]\n",
    "    )])\n",
    "\n",
    "    fig.update_layout(\n",
    "        title=f\"Floor {floor_number} - Warehouse Bin Inventory\",\n",
    "        xaxis_title=\"BayNo\",\n",
    "        yaxis_title=\"AisleNo\",\n",
    "        xaxis_type=\"category\",\n",
    "        yaxis_type=\"category\",\n",
    "        coloraxis_colorbar=dict(title=\"SumofStock\")\n",
    "    )\n",
    "\n",
    "    return fig\n",
    "\n",
    "@app.callback(\n",
    "    Output('floor-graphs-container', 'children'),\n",
    "    [\n",
    "        Input(\"stock-code-input\", \"value\"),\n",
    "        Input(\"bin-type-dropdown\", \"value\"),\n",
    "        Input(\"bin-zone-dropdown\", \"value\")\n",
    "    ]\n",
    ")\n",
    "def update_floor_graphs(stock_code, bin_type, bin_zone):\n",
    "    filtered_data = data\n",
    "\n",
    "    if stock_code is not None and stock_code != \"\":\n",
    "        filtered_data = filtered_data[filtered_data[\"StockCode\"] == stock_code]\n",
    "\n",
    "    if bin_type != \"All\":\n",
    "        filtered_data = filtered_data[filtered_data[\"BinType\"] == bin_type]\n",
    "\n",
    "    if bin_zone != \"All\":\n",
    "        filtered_data = filtered_data[filtered_data[\"BinZone\"] == bin_zone]\n",
    "\n",
    "    floor_graphs = []\n",
    "\n",
    "    for floor_number in floor_numbers:\n",
    "        floor_data = filtered_data[filtered_data[\"FloorNo\"] == floor_number]\n",
    "        floor_graph = create_floor_graph(floor_number, floor_data)\n",
    "        floor_graphs.append(\n",
    "            dcc.Graph(\n",
    "                figure=floor_graph,\n",
    "                style={'width': '49%', 'display': 'inline-block'}  # Adjust the width and layout\n",
    "            )\n",
    "        )\n",
    "\n",
    "    return floor_graphs\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    app.run_server(debug=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b4d7851",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
